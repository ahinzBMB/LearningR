---
title: "Reproducible document"
author: "Alexander"
format: html
---

## Basics of R

```{r}
1 + 1
```
## Setup Code Chunk
```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(
  here::here("data/post-meal-insulin.csv")
)

small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)

tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```
## About me
- Alexander Hinz
- SDU
I am a new **Ph.d Student** at FGM under the supervision by *Susanne* Mandrup. My work is focused on in vivo adipogenesis in humans adipose tissue.

## Simple code
```{r}
3 * 3
```

## Testing for Git
Its cold in Denmark at this time of the year

## Showing the data
```{r}
post_meal_data
```

```{r}
glimpse(post_meal_data)
```
## Visualization of Data
```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

Making a figure link that opens a windows figure when hovering over it. 
@fig-bmi-histo

## Exercise discerete plots

### Plotting one discrete values
```{r}
#| fig-cap: "Discrete plotting of glykemi"
#| label: fig-glykemi

ggplot(post_meal_data, aes(glykemi)) +
  geom_bar()
```

@fig-glykemi

### Plotting two discrete values
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = glykemi)) +
  geom_bar()
```

```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```

Position_dodge() places information next to each other
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```
## Putting two plots side by side

```{r BMI histogram}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

```{r glykemi barplot}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r side-by side-figs}
#| label: fig-bmi-glykemi
#| fig-cap: "BMI and glykemi, side by side"
#| fig-subcap:
#| - "Distribution of BMI"
#| - "Number of those with glykemi"
#| layout-ncol: 2

ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

## Plotting two continous variables
```{r scatterplot BMI and plasma glucose}
#| label: fig-bmi-auc-pc
#| fig-cap: "Scatterplot of correlation between BMI and Glucose"

ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```
## Pushing changes to remote
## Pulling changes to local PC

## Manipulating Data
select(dataset, variable of interest). "-" sign indicates removing column.
starts_with("") extracts data that has a specific character or set. Also works with ends_with("")
contains("") extracts information in the dataset where the specific set of characters occurs.
```{r Selecting Data}
select(post_meal_data, Age)

select(post_meal_data, Age, BMI, Weight)

select(post_meal_data, -Group)

select(post_meal_data, starts_with("PG"))

select(post_meal_data, ends_with("DXA"))

select(post_meal_data, contains("0"))
```

## Renaming specific columns

Old name = right side
New name = left side
```{r Using the pipe operator}
small_post_meal_data |>
  rename(auc_glucose = auc_pg)

small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```

## Select and rename tasks
```{r}
post_meal_data |>
  select(contains("OGTT"))

post_meal_data |>
  select(contains(".."), -contains("...")) |>
  rename(
    P.Glucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )

post_meal_data |>
  select(id, BMI, Length, Weight, Age) |>
  rename(
    Height = Length
  )
```

## Filtering data by row

Note: You can add multiple conditions 
```{r}
small_post_meal_data |>
  filter(glykemi == 1)

small_post_meal_data |>
  filter(BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR")
```

```{r}
small_post_meal_data |>
  filter(Group == "CTR", BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```

## Modify or add column
Mutate function. Left side defines new variable. Right side performs action.
Group = if_else. This statement searches the Group for the true condition "CTR". If its met, the cell value will be replaced with "Control" otherwise it will be replaced with "First-degree relative".
```{r}
tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

## Practice with filter and mutate function

```{r}
post_meal_data |>
  filter(BMI >= 20 & BMI <= 40 & Group == "FDR")

post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |>
  filter(percent_body_fat > 30)
```

## Visualizing with jitter plot
```{r}
tidied_post_meal_data |>
  mutate(Overweight = if_else(BMI >= 25, "Overweight", "Not Overweight")) |>
  ggplot(aes(x = Overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```

## Plotting three or more variables
```{r dotplot}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```

```{r}
#| label: fig-Age-Insulin-Glucose-Ratio
#| fig-cap: "Age and Insulin, side by side"
#| fig-subcap:
#| - "Dotplot of Age and Ratio"
#| - "Dotplot of Age and Ratio"
#| layout-ncol: 2

tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(Young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(cols = vars(Young)) +
  labs(x = "Body Mass Index", y = "Insulin to Glucose Ratio")

tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(Young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(Young)) +
  labs(y = "Body Mass Index", x = "Insulin to Glucose Ratio")
```

## Making multi-dimensional plots 
```{r}
#| layout-ncol: 2

post_meal_data |>
  mutate(percent_body_fat = (Fat.mass.DXA / Weight) * 100) |>
  mutate(Young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = Young)) +
  geom_jitter(width = 0.2)


post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA, colour = insulin_insensitive)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```
## Changing Colours
```{r}
# Tasks 1. and 2.
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "inferno")
```

## Calculating summary statistics
```{r}
tidied_post_meal_data |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```

## Summarise with splitting
```{r}
#| label: tbl-mean-age-bmi
#| tbl-cap: "Mean values of Age and BMI for each Group"
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    "Mean Age (yrs)"= round(mean(Age), 1),
    "Mean BMI (kg/m^2)" = round(mean(BMI), 1)
  ) |>
  ungroup() |>
  knitr::kable()
```

See @tbl-mean-age-bmi

## Creating a table using R code
```{r}
#| label: tbl-summary-table
#| tbl-cap: "Median values of AUC measurements by age group and family history group"
post_meal_data |>
  # Task 2.
  filter(BMI < 30) |>
  # Task 3.
  mutate(
    age_group = if_else(Age < 40, "Young", "Old"),
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  ) |>
  # Task 4.
  group_by(Group, age_group) |>
  summarise(
    "AUC C peptide" = round(median(auc_cp), 1),
    "AUC Glucose" = round(median(auc_pg), 1),
    "AUC Insulin" = round(median(auc_ins), 1)
  ) |>
  # Task 5.
  rename(
    "Age Group" = age_group,
    "Family History" = Group
  ) |>
  # Task 6.
  ungroup() |>
  knitr::kable()
```

See @tbl-summary-table, very nice table! :D
